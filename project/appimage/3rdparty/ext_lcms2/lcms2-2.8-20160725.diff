commit fa73cd1733b3cf122489d2c757485db0ac7b5cd3
Author: Boudewijn Rempt <boud@valdyas.org>
Date:   Tue Jul 26 10:12:27 2016 +0200

    ...

diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..90cee70
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,22 @@
+project(lcms2)
+
+option(BUILD_TESTS "build the test executable" ON)
+option(BUILD_STATIC "build the static library" ON)
+option(BUILD_UTILS "build the utilities executables" ON)
+
+set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
+
+cmake_minimum_required(VERSION 2.6)
+
+include_directories(
+${CMAKE_BINARY_DIR}/include 
+${CMAKE_SOURCE_DIR}/include
+)
+
+add_subdirectory(src)
+if(BUILD_TESTS)
+    add_subdirectory(testbed)
+endif(BUILD_TESTS)
+if(BUILD_UTILS)
+    add_subdirectory(utils)
+endif(BUILD_UTILS)
diff --git a/include/lcms2.h b/include/lcms2.h
index 739e6e1..969bc3a 100644
--- a/include/lcms2.h
+++ b/include/lcms2.h
@@ -212,15 +212,14 @@ typedef int                  cmsBool;
 
 #endif  // CMS_USE_BIG_ENDIAN
 
-
 // Calling convention -- this is hardly platform and compiler dependent
 #ifdef CMS_IS_WINDOWS_
-#  if defined(CMS_DLL) || defined(CMS_DLL_BUILD)
+#   if !defined(CMS_STATIC)
 #     ifdef __BORLANDC__
 #        define CMSEXPORT       __stdcall _export
 #        define CMSAPI
 #     else
-#        define CMSEXPORT      __stdcall
+#         define CMSEXPORT
 #        ifdef CMS_DLL_BUILD
 #            define CMSAPI    __declspec(dllexport)
 #        else
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
new file mode 100644
index 0000000..ac575c7
--- /dev/null
+++ b/src/CMakeLists.txt
@@ -0,0 +1,64 @@
+# some configure checks:
+if(WIN32)
+    if(MSVC)
+        set(UINT8_T "unsigned char")
+        set(UINT16_T "unsigned short")
+        set(UINT32_T "unsigned long")
+        set(INT8_T "char")
+        set(INT16_T "short")
+        set(INT32_T "long")
+    else(MSVC)
+        set(UINT8_T "uint8_t")
+        set(UINT16_T "uint16_t")
+        set(UINT32_T "uint32_t")
+        set(INT8_T "int8_t")
+        set(INT16_T "int16_t")
+        set(INT32_T "int32_t")
+    endif(MSVC)
+endif(WIN32)
+
+set(lcms_SRCS
+    cmscnvrt.c
+    cmserr.c
+    cmsgamma.c
+    cmsgmt.c
+    cmsintrp.c
+    cmsio0.c
+    cmsio1.c
+    cmslut.c
+    cmsplugin.c
+    cmssm.c
+    cmsmd5.c
+    cmsmtrx.c
+    cmspack.c
+    cmspcs.c
+    cmswtpnt.c
+    cmsxform.c
+    cmssamp.c
+    cmsnamed.c
+    cmscam02.c
+    cmsvirt.c
+    cmstypes.c
+    cmscgats.c
+    cmsps2.c
+    cmsopt.c
+    cmshalf.c
+    cmsalpha.c
+)
+
+include_directories(${CMAKE_BINARY_DIR})
+
+add_library(lcms SHARED ${lcms_SRCS})
+set_target_properties(lcms PROPERTIES OUTPUT_NAME "lcms2"
+                                      DEFINE_SYMBOL CMS_DLL_BUILD)
+
+if(BUILD_TESTS OR BUILD_UTILS OR BUILD_STATIC)
+    add_library(lcms_static ${lcms_SRCS})
+	set_target_properties(lcms_static PROPERTIES COMPILE_FLAGS -DCMS_STATIC)
+    set(LCMS_STATIC lcms_static)
+endif(BUILD_TESTS OR BUILD_UTILS OR BUILD_STATIC)
+
+install(TARGETS lcms ${LCMS_STATIC} RUNTIME DESTINATION bin
+                                    LIBRARY DESTINATION lib
+                                    ARCHIVE DESTINATION lib)
+install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/../include/lcms2.h ${CMAKE_CURRENT_SOURCE_DIR}/../include/lcms2_plugin.h DESTINATION include)
diff --git a/testbed/CMakeLists.txt b/testbed/CMakeLists.txt
new file mode 100644
index 0000000..ca9008b
--- /dev/null
+++ b/testbed/CMakeLists.txt
@@ -0,0 +1,5 @@
+include_directories(${CMAKE_CURRENT_SOURCE_DIR}/../include ${CMAKE_CURRENT_SOURCE_DIR}/../src)
+
+add_executable(testcms testcms2.c testplugin.c zoo_icc.c)
+target_link_libraries(testcms lcms_static)
+set_target_properties(testcms PROPERTIES COMPILE_FLAGS -DCMS_STATIC)
diff --git a/testbed/testcms2.c b/testbed/testcms2.c
index 203e53c..9b37774 100644
--- a/testbed/testcms2.c
+++ b/testbed/testcms2.c
@@ -28,7 +28,7 @@
 #include "testcms2.h"
 
 // On Visual Studio, use debug CRT
-#ifdef _MSC_VER
+#ifdef _WIN32
 #     include "crtdbg.h"
 #     include <io.h>
 #endif
diff --git a/testbed/zoo_icc.c b/testbed/zoo_icc.c
index b9e1efe..97e3294 100755
--- a/testbed/zoo_icc.c
+++ b/testbed/zoo_icc.c
@@ -27,6 +27,11 @@
 
 #include "testcms2.h"
 
+#ifdef _WIN32
+#     include "crtdbg.h"
+#     include <io.h>
+#endif
+
 
 // ZOO checks ------------------------------------------------------------------------------------------------------------
 
diff --git a/utils/CMakeLists.txt b/utils/CMakeLists.txt
new file mode 100644
index 0000000..c3be5bf
--- /dev/null
+++ b/utils/CMakeLists.txt
@@ -0,0 +1,78 @@
+include_directories(
+    ${CMAKE_CURRENT_SOURCE_DIR}/../include
+    ${CMAKE_CURRENT_SOURCE_DIR}/../src
+    ${CMAKE_CURRENT_SOURCE_DIR}/../utils/common
+)
+
+find_package(JPEG)
+find_package(TIFF)
+
+set(UTILS_EXECUTABLES )
+set(UTILS_MANPAGES )
+
+###############################################################################
+if(JPEG_FOUND)
+    include_directories(${JPEG_INCLUDE_DIR})
+    set(JPGICC_SRCS
+        jpgicc/jpgicc.c
+        jpgicc/iccjpeg.c
+        common/xgetopt.c
+        common/vprf.c
+    )
+    add_executable(jpgicc ${JPGICC_SRCS})
+    target_link_libraries(jpgicc lcms ${JPEG_LIBRARIES})
+    list(APPEND UTILS_EXECUTABLES jpgicc)
+    list(APPEND UTILS_MANPAGES jpgicc/jpgicc.1)
+endif(JPEG_FOUND)
+
+###############################################################################
+set(LINKICC_SRCS
+    linkicc/linkicc.c
+    common/xgetopt.c
+    common/vprf.c
+)
+add_executable(linkicc ${LINKICC_SRCS})
+target_link_libraries(linkicc lcms)
+list(APPEND UTILS_EXECUTABLES linkicc)
+list(APPEND UTILS_MANPAGES linkicc/linkicc.1)
+
+###############################################################################
+set(PSICC_SRCS
+    psicc/psicc.c
+    common/xgetopt.c
+    common/vprf.c
+)
+add_executable(psicc ${PSICC_SRCS})
+target_link_libraries(psicc lcms)
+list(APPEND UTILS_EXECUTABLES psicc)
+list(APPEND UTILS_MANPAGES psicc/psicc.1)
+
+###############################################################################
+if(TIFF_FOUND)
+    include_directories(${TIFF_INCLUDE_DIR})
+    set(JPGICC_SRCS
+        tificc/tificc.c
+        common/xgetopt.c
+        common/vprf.c
+    )
+    add_executable(tificc ${JPGICC_SRCS})
+    target_link_libraries(tificc lcms ${TIFF_LIBRARIES})
+    list(APPEND UTILS_EXECUTABLES tificc)
+    list(APPEND UTILS_MANPAGES tificc/tificc.1)
+endif(TIFF_FOUND)
+
+###############################################################################
+set(TRANSICC_SRCS
+    transicc/transicc.c
+    common/xgetopt.c
+    common/vprf.c
+)
+add_executable(transicc ${TRANSICC_SRCS})
+target_link_libraries(transicc lcms)
+list(APPEND UTILS_EXECUTABLES transicc)
+list(APPEND UTILS_MANPAGES transicc/transicc.1)
+
+install(TARGETS ${UTILS_EXECUTABLES} RUNTIME DESTINATION bin
+                                     LIBRARY DESTINATION lib
+                                     ARCHIVE DESTINATION lib)
+install(FILES ${UTILS_MANPAGES} DESTINATION share/man/man1)
